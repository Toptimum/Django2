Этот файл содержит историю создания проекта на Джанго:
----------------------------------------------------------
1. Обновили Python и установили Django.
2. Установили и настроили PyCharm, бесплатную версию Community.
3. Создали новый проект Джанго, проверили наличие файла manage.py
4. Создали новое приложение mainapp.
5. Создали файл runserver.bat для быстрого запуска сервера.
6. В файле setting.py поменяли язык на русский.
7. В папке приложения mainapp создали папку с шаблонами.
8. Создали папку static для дополнительных файлов шаблона.
9. Прописали ссылки в файле urls.py
10. Настроили соответствующие представления в файле views.py
11. Скорректировали ссылки в файлах шаблона.
--------------------------------------------------------------------
12. По замечанию преподавателя добавили слэш в конце ссылок.
13. Реализовали универсальный шаблон ссылок для статических файлов (стили и картинки).
14. В urls.py динамически реализовали ссылки. И в шаблонах изменили формат ссылки на динамический.
15. Создали "скелет" сайта base.html и настроили шаблон страницы contacts на основани "скелета".
16. Перевели контент на странице Контакты и доработали подвал сайта, также выводим актуальный год в копирайтинге.
17. Реализовали наследование шаблона Каталога товаров от base, перевели контент и заменили картинки.
18. Наследовали главную страницу от скелета base и немного изменили картинки и контент. Изменили навигацию в шапке.
19. Наследовали страницу товара от base.html
20. Два меню на сайте представили подключаемыми подшаблонами.
21. С помощью передачи контекста в шаблон передаем: title, header1 и подкатегории Каталога товаров.
22. Доработали подключение inc_main_menu.html, чтобы текущая загруженная страница выделялась в навигации.
-------------------------------------------------------------------------------------------------------------
23. Создали первую модель Категории товаров (Categories), которую мигрировали в БД (превратилась в таблицу).
24. Создали вторую модель Товаров (Products), которую мигрировали в БД с соответствующими полями.
25. Установили pip install pillow, чтобы строка image = models.ImageField не вызывала ошибку.
26. Пересоздали модель Products и мигрировали вновь.
27. Настроили проект, чтобы он мог работать с медиа-файлами.
28. Заполнение базы данных через консоль, скриншоты по ссылкам: создали 3 категории в консоли
    http://prntscr.com/om3x5a, добавили товар http://prntscr.com/om40ou
29. Через консоль создали суперпользователя django с паролем geekbrains
30. Подключили две наши модели (Categories, Products) к админке, чтобы можно было работать с ними через админку.
31. Изменили шаблон товара, чтобы выводились категории и товары.
32. Создали пространство имен (диспетчер ссылок) в нашем приложении mainapp и изменили ссылки в шаблонах сайта.
-----------------------------------------------------------------------------------------------------------------
33. Сделаем бэкапы базы данных (полный, mainapp (Categories, Products) и auth) в формате json.
34. Напишем свою команду (\mainapp\management\commands\fill_db.py) для наполнения БД из файлов
    (Categories и Products), формата json.
35. Чтобы восстанавливать данные по команде fill_db, необходимо сначала изменить данные в файлах json:
    в категориях http://joxi.ru/EA4w9Z0ToNeBW2, а в товарах дополнительно изменить http://prntscr.com/ooe3ik Если файл
    базы удалили, необходимо выполнять команду миграции, и лишь затем восстанавливать данные.
36. Создадим и настроем новое приложение authapp.
37. Создали модель ShopUser и новые миграции.
38. Процедура аутентификации пользователя: создаем форму login и logout.
39. Создали форму регистрации.
40. Создали и настроили форму Update для редактирования данных пользователя.
-----------------------------------------------------------------------------------------------------
41. Поработали с запросами в консоли через механизм Django ORM, скриншоты: сначала импортируем
    модели http://prntscr.com/opv0pp, получили и вывели все товары http://prntscr.com/opv17f,
    получили дорогие товары из базы http://prntscr.com/opv35x, и недорогие товары http://prntscr.com/opv3qy,
    вывели товары определенной категории http://prntscr.com/opv5ht, сортировка по убыванию http://prntscr.com/opv6ad
42. В меню категорий реализовали ссылки на конкретные категории. Реализовали вывод товаров по категориям.
43. Реализация приложения Корзины, а также ее модели.
44. Реализация функционала добавления товаров (basket_add) в корзину.
45. Реализовали подсчет товаров в корзине. Добавили корзинку в шаблон сайта.
46. Мы создали новую модель (таблицу в базе) информационных страниц, создали эти страницы. Переделали меню в шапке.
47. Реализовали динамическое меню в подвале сайта. Добавили стили.
----------------------------------------------------------------------------------------------------
48. Исправили баг, когда незарегистрированный пользователь пытался добавить товар в корзину.
49. Реализовали правильный подсчет товаров в корзине и сумму к оплате (ошибку не выдает, но и не работает).
50. Реализовали шаблон корзины и выводим содержимое корзины пользователя (не работает подсчет суммы и кол-ва товаров).
51. На главной выводим специальные модели товаров.
52. На странице товара выводим фотографию, название товара, его стоимость, описание, и похожие товары.
53. Реализовали удаление товаров из корзины.
54. Доработали представление товара, теперь в каталоге выводятся ссылки на товары.
55. Декоратор для зарегистрированных пользователей, чтобы срабатывало правильное перенаправление.
56. Доработали шаблоны авторизации, страницы товара и починили корзину.
57. Настроили Ajax для корзины.
-----------------------------------------------------------------------------------------------------
58. Создали приложение собвственной админки. Реализовали вывод пользователей в админке и создание нового пользователя.
59. В админку добавили функционал редактирования данных пользователей.
60. Еще добавили удаление пользователей через админку.
61. Ограничили доступ в админку через @user_passes_test
62. В админке создали новую вкладку Категории и выводим эти категории.
63. В модели Категорий и Товаров добавили активность.
64. "Косметический ремонт": сверстали формы авторизации, регистрации, изменили ссылки на баннерах. Теперь в похожих
    товарах не выводится тот же товар. На странице товара добавили вывод лейблов, изменили кнопку.
--------------------------------------------------------------------------------------------------
65. В нашей админке добавили функционал: добавления, редактирования и ее удаления/деактивации категории.
66. В нашу админку для товаров реализовали добавление товара, его изменение и удаление.
67. Добавили функцию подробного просмотра товара.
68. Реализовали пагинацию по страницам каталога товаров.
69. CBV: ListView, CreateView and UpdateView.
70. CBV: DetailView.
71. Собственный шаблонный фильтр медиа-файлов.
================================================================================================
72. В папке с проектом создали виртуальное окружение для Джанго 2.0 - скриншот http://joxi.ru/BA0wMWqTM874J2
73. В urls.py mainapp и geekshop изменили ссылки на path вместо re_path.
74. Активация пользователя по e-mail.
75. Средствами Python SMTP-сервером отправили сообщение http://joxi.ru/D2P740NiqZgOPm и само сообщение
    http://joxi.ru/8An8G91Tz9dLVm или файл письма http://joxi.ru/D2P740NiqZgGYm
76. Создали форму верификации и организовали активацию пользователя по ссылке http://joxi.ru/L21wvdgTRN9XGr
77. Для корзины реализовали контекстный процессор.
==============================================================================================
78. Аутентификация с помощью соцсети ВКонтакте: устанавливаем social_auth_app_django, дополняем settings, делаем
    миграции, подключаем ссылки (urls) приложения social_django, в шаблоне размещаем кнопку соцсети, в модели
    пользователя задаем значение возраста по умолчанию, во view добавляем принудительный backend.
79. Доптаблица с инфой о пользователе, создание связи "один-к-одному": создаем новый класс ShopUserProfile, создаем
    команду update_db.py, выполняем миграции, регистрируем нового пользователя, и в базе проверяем новый профиль
    пользователя, создадим форму для редактирования расширенных данных, создадим новую модель ShopUserProfileEditForm,
    добавим контроллер с декоратором @transaction.atomic def edit(request), и добавим форму в шаблон.
80. Реализовали функционал заполнения профиля пользователя данными из ВКонтакте. "Поиграли" с исключением
    http://joxi.ru/gmvE39MTqKqMjr
81. Создали новое приложение ordersapp и настроили вывод заказов в нашей админке.
82. Реализовали контроллеры для: просмотра заказа, его редактирования и удаления.
==========================================================================================================
83. В корзину добавили кнопку "Создать заказ".
84. С помощью сигналов pre_save и pre_delete изменяем количество товаров в зависимости от заказа.
85. С помощью jQuery реализовали динамическое изменение стоимости и кол-во товаров в заказе, без перезагрузки страницы.
86. Для заказов реализовали кнопку "Добавить товар", чтобы можно было расширить заказ прямо в админке.
87. Исправили стили и bootstrap для админки.
===============================================================================================================
88. Исправили баг: теперь при формировании нового заказа выводятся только активные товары.
89. Исправили баг №2: в новом заказе при добавлении нового товара подгружается его цена и происходит перерасчет
    стоимости всего заказа, даже при удалении товара.
90. Развертывание проекта, см. файл project_deployment.txt в папке проекта.



















